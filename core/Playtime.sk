on join:
	if player has not played before:
		set {_c} to true
	while player is online:
		wait 1 second
		add 1 to {core::playtime::%player's uuid%::seconds}
		add 1 to {core::playtime::totalTimespan::%player's uuid%}
		if {_c} is true:
			add 1 to {core::playtime::averageFirstJoin::%player's uuid%}
		add 1 to {core::players::%player's uuid%::playtime::totalSeconds}
		add 1 to {core::players::%player's uuid%::playtime::seconds}
		if {core::players::%player's uuid%::playtime::seconds} > 60:
			add 1 to {core::players::%player's uuid%::playtime::minutes}
		if {core::players::%player's uuid%::playtime::minutes} > 60:
			add 1 to {core::players::%player's uuid%::playtime::hours}
		if {core::players::%player's uuid%::playtime::hours} > 24:
			add 1 to {core::players::%player's uuid%::playtime::days}
function calculateAveragePlaytime():
	set {_a} to 0
	set {_b} to 0
	loop {core::playtime::totalTimespan::*}:
		add 1 to {_a}
		add loop-value to {_b}
	set {core::info::playtime::average} to {_b} / {_a}
	set {core::info::playtime::nextUpdate} to 60*15
	set {core::info::playtime::lastUpdate} to 0
	set {_a} to 0
	set {_b} to 0
	loop {core::playTime::averageFirstJoin::*}:
		add 1 to {_a}
		add loop-value to {_b}
	set {core::info::playtime::averageFirstJoin} to {_b} / {_a}
every second:
	add 1 to {core::info::playtime::lastUpdate}
	remove 1 from {core::info::playtime::nextUpdate}
	if {core::info::playtime::nextUpdate} = 0:
		calculateAveragePlaytime()